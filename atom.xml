<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Beitzel.org</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://beitzel.org/"/>
  <updated>2016-12-08T23:47:44.358Z</updated>
  <id>http://beitzel.org/</id>
  
  <author>
    <name>Beitzel.org</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Decision Trees with F# and Accord.NET (Part 2)</title>
    <link href="http://beitzel.org/2016/12/07/Decision-Trees-with-F-and-Accord-NET-Part-2/"/>
    <id>http://beitzel.org/2016/12/07/Decision-Trees-with-F-and-Accord-NET-Part-2/</id>
    <published>2016-12-08T03:12:19.000Z</published>
    <updated>2016-12-08T23:47:44.358Z</updated>
    
    <content type="html"><![CDATA[<p>This is part 2 of my attempt to use an <a href="http://accord-framework.net/" target="_blank" rel="external">Accord.NET</a> Decision Tree to classify Lego set themes using <a href="http://fsharp.org/" target="_blank" rel="external">F#</a>.  Just as a reminder, the original data source is <a href="http://rebrickable.com/downloads" target="_blank" rel="external">Rebrickable</a>.  You can find <a href="/2016/12/05/Decision-Trees-with-F-and-Accord-NET-Part-1">Part 1</a> here.</p>
<p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="external">Paket</a>, here is a sample paket.dependencies file.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">source https:<span class="comment">//nuget.org/api/v2</span></div><div class="line">nuget Accord</div><div class="line">nuget Accord.Math</div><div class="line">nuget Accord.Statistics</div><div class="line">nuget Accord.MachineLearning</div><div class="line">nuget FSharp.Data</div></pre></td></tr></table></figure>
<p>This is the boring setup stuff.  It also includes some utility functions.  Not specific just to the utility functions, but one of my goals for these functions is flexibility.  I can add and remove features from the extract script without impacting code here.  This dynamic aspect of function building makes testing changes easier.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">#i <span class="string">"../packages"</span></div><div class="line">#r <span class="string">"../packages/Accord/lib/net45/accord.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord.MachineLearning/lib/net45/accord.machinelearning.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord.Math/lib/net45/Accord.Math.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord.Math/lib/net45/Accord.Math.Core.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord.Statistics/lib/net45/Accord.Statistics.dll"</span></div><div class="line">#r <span class="string">"../packages/FSharp.Data/lib/net40/FSharp.Data.dll"</span></div><div class="line"></div><div class="line"><span class="keyword">open</span> System</div><div class="line"><span class="keyword">open</span> System.IO</div><div class="line"><span class="keyword">open</span> Accord</div><div class="line"><span class="keyword">open</span> Accord.MachineLearning</div><div class="line"><span class="keyword">open</span> Accord.MachineLearning.DecisionTrees</div><div class="line"><span class="keyword">open</span> Accord.MachineLearning.DecisionTrees.Learning</div><div class="line"><span class="keyword">open</span> Accord.Math</div><div class="line"><span class="keyword">open</span> Accord.Statistics.Analysis</div><div class="line"><span class="keyword">open</span> FSharp.Data</div><div class="line"></div><div class="line"><span class="keyword">let</span> rand = <span class="keyword">new</span> Random()</div><div class="line"></div><div class="line"><span class="comment">// Shuffle an array (in-place)</span></div><div class="line"><span class="keyword">let</span> shuffle (a:<span class="symbol">'a</span>[]) =</div><div class="line">    <span class="keyword">let</span> swapByIndex i j =</div><div class="line">        <span class="keyword">let</span> tmp = a.[i]</div><div class="line">        a.[i] &lt;- a.[j]</div><div class="line">        a.[j] &lt;- tmp</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> maxIndex = Array.length a - <span class="number">1</span></div><div class="line">    [|<span class="number">0.</span>.maxIndex|] </div><div class="line">    |&gt; Array.iter (<span class="keyword">fun</span> i -&gt; swapByIndex i (rand.Next maxIndex))</div><div class="line">    a</div><div class="line"></div><div class="line"><span class="comment">// Send a tree + input + output and generate a tuple with results for comparison</span></div><div class="line"><span class="keyword">let</span> getResults (tree:DecisionTree) (inputs:float[][]) (outputs:int[]) =</div><div class="line">    Array.zip inputs outputs</div><div class="line">    |&gt; Array.map (<span class="keyword">fun</span> (i,o) -&gt; (i, o, tree.Decide(i)))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Calculate number of correct predictions</span></div><div class="line"><span class="keyword">let</span> resultsTotalCorrect results = </div><div class="line">    results</div><div class="line">    |&gt; Array.map (<span class="keyword">fun</span> (_, actual:int, predicted:int) -&gt; </div><div class="line">        <span class="keyword">if</span> actual = predicted <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>)</div><div class="line">    |&gt; Array.fold (+) <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Use the input and output datasets to get correct prediction stats</span></div><div class="line"><span class="keyword">let</span> processResults tree inputs outputs = </div><div class="line">    <span class="keyword">let</span> results = getResults tree inputs outputs</div><div class="line">    (</div><div class="line">        results, </div><div class="line">        resultsTotalCorrect results</div><div class="line">    )</div><div class="line"></div><div class="line"><span class="comment">// Display results</span></div><div class="line"><span class="keyword">let</span> showResults description correct total =</div><div class="line">    printfn <span class="string">"%s - Direct row match  : Correct %d/%d (%.3f)"</span> description correct total (float(correct) / (float(total)))</div></pre></td></tr></table></figure>
<p>Here are some data transformation functions. <em>buildTrainTestIndexes</em> generates a list of indexes for the training and test sets.  The data is randomized and all records are in one and only one set (no overlap between train and test).  <em>splitDataset</em> does the actual split into train and test sets.  <em>splitDataIntoInputAndOutput</em> breaks a dataset into inputs and outputs for decision tree consumption.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Build a list of indexes for the train and test sets</span></div><div class="line"><span class="comment">// Current implementation assigns a random 'trainpercent' of the indexes</span></div><div class="line"><span class="comment">// to the trainingset, and the remainder to the test set</span></div><div class="line"><span class="keyword">let</span> buildTrainTestIndexes (length:int) (trainPercent:float) :(int[] * int[]) = </div><div class="line">    <span class="keyword">let</span> splitIndex = int(Math.Floor(trainPercent * float(length<span class="number">-1</span>)))</div><div class="line">    <span class="keyword">let</span> indexes = [|<span class="number">0.</span>.length - <span class="number">1</span>|]</div><div class="line">    shuffle indexes |&gt; ignore</div><div class="line">    (indexes.[<span class="number">0.</span>.splitIndex],  <span class="comment">// training indexes</span></div><div class="line">     indexes.[splitIndex+<span class="number">1.</span>.])  <span class="comment">// testing indexes</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Split a dataset into a trainingset and a testing set (with no overlap)</span></div><div class="line"><span class="keyword">let</span> splitDataset (d:list&lt;<span class="symbol">'a</span>&gt;) (trainPercent:float) =</div><div class="line">    <span class="keyword">let</span> (trainIndexes, testIndexes) = buildTrainTestIndexes (List.length d) trainPercent</div><div class="line">    (trainIndexes |&gt; Array.map (<span class="keyword">fun</span> i -&gt; List.item i d),  <span class="comment">// training set</span></div><div class="line">     testIndexes  |&gt; Array.map (<span class="keyword">fun</span> i -&gt; List.item i d))  <span class="comment">// testing set</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Splits dataset into its input and output </span></div><div class="line"><span class="comment">// Assumption: row's first column is label (output)</span></div><div class="line"><span class="keyword">let</span> splitDataIntoInputAndOutput (d:<span class="symbol">'a</span>[][]) = </div><div class="line">    (</div><div class="line">        d</div><div class="line">        |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.[<span class="number">1.</span>.(Array.length row - <span class="number">1</span>)]),</div><div class="line">        d</div><div class="line">        |&gt; Array.map (<span class="keyword">fun</span> row -&gt; row.[<span class="number">0</span>])</div><div class="line">    )</div></pre></td></tr></table></figure>
<p>Here are decision tree setup specific functions.  The decision tree uses a DecisionVariable collection. Decision Tree ranges come in different flavors, but all my features are double, thus DoubleRange.  The other point of interest is <em>decisionVariablesIList</em>, this is necessarily because the F# list as I was using it didn’t meet the interface needs.  This very well could be something I missed on my part, but this seemed like the only way to resolve the conflict.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> newRangeFromColumn (d:Double[][]) (i:int) = </div><div class="line">    <span class="keyword">new</span> DoubleRange(</div><div class="line">        d |&gt; Array.map (<span class="keyword">fun</span> r -&gt; r.[i]) |&gt; Array.min,</div><div class="line">        d |&gt; Array.map (<span class="keyword">fun</span> r -&gt; r.[i]) |&gt; Array.max)</div><div class="line"></div><div class="line"><span class="comment">// Create a new decision variable for a column</span></div><div class="line"><span class="keyword">let</span> newDecisionVariableFromColumn (d:Double[][]) (i:int) =</div><div class="line">    <span class="keyword">new</span> DecisionVariable((sprintf <span class="string">"col%d"</span> i), newRangeFromColumn d i)</div><div class="line"></div><div class="line"><span class="comment">// Create a list of decision variables for the DecisionTree</span></div><div class="line"><span class="keyword">let</span> decisionVariables (inputs:float[][]) = </div><div class="line">    [<span class="number">0.</span>.(Array.length inputs.[<span class="number">0</span>])<span class="number">-1</span>] </div><div class="line">    |&gt; List.map (newDecisionVariableFromColumn inputs)</div><div class="line"></div><div class="line"><span class="comment">// Create a list of decision variables for the DecisionTree</span></div><div class="line"><span class="keyword">let</span> decisionVariablesIList (inputs:float[][]) = </div><div class="line">    <span class="keyword">let</span> variableList = <span class="keyword">new</span> Collections.Generic.List&lt;DecisionVariable&gt;()</div><div class="line">    decisionVariables inputs |&gt; List.iter (<span class="keyword">fun</span> x -&gt; variableList.Add(x))</div><div class="line">    variableList</div><div class="line"></div><div class="line"><span class="comment">// Get number of classes </span></div><div class="line"><span class="keyword">let</span> numClasses (d:int[]) = Array.max d - Array.min d + <span class="number">1</span></div><div class="line"></div></pre></td></tr></table></figure>
<p>All the prep functions are in place.  First I load the data.  Often I use the CsvProvider, but in this case I want the data directly in an array.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dataset = </div><div class="line">    Path.Combine(__SOURCE_DIRECTORY__, <span class="string">"..\\data\\legos\\aggregatedata.csv"</span>)</div><div class="line">    |&gt; File.ReadLines</div><div class="line">    |&gt; Seq.skip <span class="number">1</span> <span class="comment">// Skip header row</span></div><div class="line">    <span class="comment">//|&gt; Seq.take 10000 // For testing only take a subset of records</span></div><div class="line">    |&gt; Seq.map (<span class="keyword">fun</span> x -&gt;x.Split ',')</div><div class="line">    |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; Array.map (<span class="keyword">fun</span> y -&gt; float(y)) x)</div><div class="line">    |&gt; Seq.toList</div></pre></td></tr></table></figure>
<p>Here I split data into train and test sets, where 70% of the data is train.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Split dataset into train and test sets </span></div><div class="line"><span class="keyword">let</span> (trainData, testData) = splitDataset dataset <span class="number">0.7</span></div><div class="line">printfn <span class="string">"Dataset Sizes: All: %d Train: %d Test: %d"</span> (List.length dataset) (Array.length trainData) (Array.length testData)</div></pre></td></tr></table></figure>
<p>Now I split the train and test sets into input/output arrays.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Split training sets into seperate components for decision tree</span></div><div class="line"><span class="keyword">let</span> (trainInputs, trainOutputs) = splitDataIntoInputAndOutput trainData    </div><div class="line"><span class="keyword">let</span> (testInputs, testOutputs) = splitDataIntoInputAndOutput testData    </div></pre></td></tr></table></figure>
<p>Here I create and train the tree.  I use the C4.5 algorithm for the learning method.  Accord also offers ID3 for learning as well.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Build the decision tree from training data</span></div><div class="line"><span class="keyword">let</span> tree = <span class="keyword">new</span> DecisionTree(decisionVariablesIList trainInputs, numClasses (Array.map int trainOutputs))</div><div class="line"></div><div class="line"><span class="comment">// Train the tree</span></div><div class="line"><span class="keyword">let</span> c45 = <span class="keyword">new</span> C45Learning(tree)</div><div class="line"></div><div class="line"><span class="keyword">let</span> error = c45.Learn(trainInputs, (Array.map int trainOutputs))</div></pre></td></tr></table></figure>
<p>Once the tree is trained, I apply the results to the train and test sets and then display the results.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Process train and test results</span></div><div class="line"><span class="keyword">let</span> (trainResults, trainTotalCorrect) = processResults tree trainInputs (Array.map int trainOutputs)    </div><div class="line"><span class="keyword">let</span> (testResults, testTotalCorrect) = processResults tree testInputs (Array.map int testOutputs)</div><div class="line"></div><div class="line"><span class="comment">// Final display of results</span></div><div class="line">showResults <span class="string">"Train"</span> trainTotalCorrect (Array.length trainInputs)</div><div class="line">showResults <span class="string">"Test "</span> testTotalCorrect (Array.length testInputs)</div></pre></td></tr></table></figure>
<p>Below are the results.  They are disappointing, and there is certainly room for improvement.  But its a start. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Train - Direct row match  : Correct 5624/7584 (0.742)</div><div class="line">Test  - Direct row match  : Correct 1342/3250 (0.413)</div></pre></td></tr></table></figure>
<p>On a whim I attempt to use the ID3 learner instead.  This method requires discrete values.  It’s easy enough to convert all the doubles to ints.  Knowing that most of my columns are percentages, I multiple by 100, then convert to an int.  Unfortunantly, my system ran out of memory on this test.  I used fsharpi (Mono) as well as fsi (.NET CLR), but it gave me the same issue.  This deserves some additional follow-up, but I don’t have time for that rabbit-hole right now.  Below is the code I used to try the ID3 learner, if someone sees what is wrong, feel free to drop me a line.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// Below is the hacked up ID3 variant of my test</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> newRangeFromColumnInt (d:int[][]) (i:int) = </div><div class="line">    <span class="keyword">new</span> IntRange(</div><div class="line">        d |&gt; Array.map (<span class="keyword">fun</span> r -&gt; r.[i]) |&gt; Array.min,</div><div class="line">        d |&gt; Array.map (<span class="keyword">fun</span> r -&gt; r.[i]) |&gt; Array.max)</div><div class="line"></div><div class="line"><span class="keyword">let</span> newDecisionVariableFromColumnInt (d:int[][]) (i:int) =</div><div class="line">    <span class="keyword">new</span> DecisionVariable((sprintf <span class="string">"col%d"</span> i), newRangeFromColumnInt d i)</div><div class="line"></div><div class="line"><span class="keyword">let</span> decisionVariablesInt (inputs:int[][]) = </div><div class="line">    [<span class="number">0.</span>.(Array.length inputs.[<span class="number">0</span>])<span class="number">-1</span>] </div><div class="line">    |&gt; List.map (newDecisionVariableFromColumnInt inputs)</div><div class="line"></div><div class="line"><span class="keyword">let</span> decisionVariablesIListInt (inputs:int[][]) = </div><div class="line">    <span class="keyword">let</span> variableList = <span class="keyword">new</span> Collections.Generic.List&lt;DecisionVariable&gt;()</div><div class="line">    decisionVariablesInt inputs |&gt; List.iter (<span class="keyword">fun</span> x -&gt; variableList.Add(x))</div><div class="line">    variableList</div><div class="line"></div><div class="line"><span class="keyword">let</span> inputsInt i = </div><div class="line">    (Array.map (<span class="keyword">fun</span> x -&gt; Array.map (<span class="keyword">fun</span> y -&gt; int(y * <span class="number">100.</span>)) x) i)</div><div class="line">    </div><div class="line"><span class="keyword">let</span> treeId3 = <span class="keyword">new</span> DecisionTree(decisionVariablesIListInt (inputsInt trainInputs), numClasses (Array.map int trainOutputs))</div><div class="line"></div><div class="line"><span class="keyword">let</span> id3 = <span class="keyword">new</span> ID3Learning(treeId3)</div><div class="line"></div><div class="line">id3.ParallelOptions.MaxDegreeOfParallelism &lt;- <span class="number">1</span></div><div class="line"><span class="keyword">let</span> errorId3 = id3.Learn((inputsInt trainInputs), (Array.map int trainOutputs))</div><div class="line"></div><div class="line"><span class="keyword">let</span> (trainResultsId3, trainTotalCorrectId3) = processResultsId3 treeId3 (inputsInt trainInputs) (Array.map int trainOutputs)    </div><div class="line"><span class="keyword">let</span> (testResultsId3, testTotalCorrectId3) = processResultsId3 treeId3 (inputsInt testInputs) (Array.map int testOutputs)</div><div class="line"></div><div class="line">showResults <span class="string">"Train"</span> trainTotalCorrectId3 (Array.length trainInputs)</div><div class="line">showResults <span class="string">"Test "</span> testTotalCorrectId3 (Array.length testInputs)</div></pre></td></tr></table></figure>
<p>Although the end results were anticlimatic, it’s nice to see it all come together.  One consolation is with over 100 possible themes, 41% on the test set isn’t the worst thing in the world.  Hopefully this has offered some insight into how to use a decision tree in Accord.NET.  Until next time…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is part 2 of my attempt to use an &lt;a href=&quot;http://accord-framework.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Accord.NET&lt;/a&gt; Decision Tree
    
    </summary>
    
    
      <category term="F#" scheme="http://beitzel.org/tags/F/"/>
    
      <category term="Accord.NET" scheme="http://beitzel.org/tags/Accord-NET/"/>
    
      <category term="Decision Trees" scheme="http://beitzel.org/tags/Decision-Trees/"/>
    
      <category term="Machine Learning" scheme="http://beitzel.org/tags/Machine-Learning/"/>
    
      <category term="Legos" scheme="http://beitzel.org/tags/Legos/"/>
    
      <category term="Data" scheme="http://beitzel.org/tags/Data/"/>
    
  </entry>
  
  <entry>
    <title>Decision Trees with F# and Accord.NET (Part 1)</title>
    <link href="http://beitzel.org/2016/12/05/Decision-Trees-with-F-and-Accord-NET-Part-1/"/>
    <id>http://beitzel.org/2016/12/05/Decision-Trees-with-F-and-Accord-NET-Part-1/</id>
    <published>2016-12-06T02:13:22.000Z</published>
    <updated>2016-12-08T02:58:47.666Z</updated>
    
    <content type="html"><![CDATA[<p>It is time for an exploration into using a Decision Tree to classify Lego set themes using <a href="http://fsharp.org/" target="_blank" rel="external">F#</a> and <a href="http://accord-framework.net/" target="_blank" rel="external">Accord.NET</a>.  </p>
<p>First things first, the data. <a href="http://rebrickable.com/downloads" target="_blank" rel="external">Rebrickable</a> has downloadable datasets for Lego sets and pieces.  I’ll use the <code>sets.csv</code> file as the primary dataset driver, but will grab information from <code>sets_pieces.csv</code>, <code>pieces.csv</code>, and <code>colors.csv</code> for feature creation.  The files are not in an format appropriate for a decision tree, so some transformations will need to happen first.  I don’t want the post to get too long, so this project will be broken into two components.  Part 1 will be building the feature file and getting the data into the desired comsumable format, <a href="/2016/12/07/Decision-Trees-with-F-and-Accord-NET-Part-2">Part 2</a> will actually use the file to get to the end goal.</p>
<p>Second, the approach.  The goal of part 1 is to do all transformations here.  I want the end result to be a file that can be directly loaded into part 2’s code.  I will use/create a series of features.  Year is the set’s year, and is directly provided.  The following features will need to be grouped and calculated.  First is “% of the set’s pieces are <x> type” for a couple major piece types.  Second, is “% of the set’s pieces are <x> color” for major color groups.  Lastly, the prediction target is theme.  The dataset has up to three themes per set (T1, T2, T3).  For simplicity sake I am only going to use one theme (T1) as the target theme to predict.  This will restrict the quality of my results, but as a proof-of-concept it will be good enough.  Hopefully all this give me some interesting results.</x></x></p>
<p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="external">Paket</a>, here is a sample <code>paket.dependencies</code> file.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">source https:<span class="comment">//nuget.org/api/v2</span></div><div class="line">nuget FSharp.Data</div></pre></td></tr></table></figure>
<p>This is the boring setup stuff.  </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#r <span class="string">"../packages/FSharp.Data/lib/net40/FSharp.Data.dll"</span></div><div class="line"></div><div class="line"><span class="keyword">open</span> System</div><div class="line"><span class="keyword">open</span> System.IO</div><div class="line"><span class="keyword">open</span> FSharp.Data</div></pre></td></tr></table></figure>
<p>Next it is time to leverage the CsvProvider for the input files.  The below code configures the types as well as loads the data. You’ve probably read it a million times, but Type Providers are really helpful to get get working with the data quickly.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// File structures</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">LegoSets</span> </span>= CsvProvider&lt;<span class="string">"../data/legos/sets.csv"</span>&gt;</div><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">LegoSetPieces</span> </span>= CsvProvider&lt;<span class="string">"../data/legos/set_pieces.csv"</span>&gt;</div><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">LegoPieces</span> </span>= CsvProvider&lt;<span class="string">"../data/legos/pieces.csv"</span>&gt;</div><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">LegoColors</span> </span>= CsvProvider&lt;<span class="string">"../data/legos/colors.csv"</span>&gt;</div><div class="line"></div><div class="line"><span class="comment">// Load files</span></div><div class="line"><span class="keyword">let</span> legoSets = LegoSets.Load <span class="string">"../data/legos/sets.csv"</span></div><div class="line"><span class="keyword">let</span> legoSetPieces = LegoSetPieces.Load <span class="string">"../data/legos/set_pieces.csv"</span></div><div class="line"><span class="keyword">let</span> legoPieces = LegoPieces.Load <span class="string">"../data/legos/pieces.csv"</span></div><div class="line"><span class="keyword">let</span> legoColors = LegoColors.Load <span class="string">"../data/legos/colors.csv"</span></div></pre></td></tr></table></figure>
<p>When building the features, I will be counting the number of specific colors in the set.  There are 135 different colors.  I only care about eight different colors: Red, Green, Blue, White, Black, Gray, Silver, and Translucent.  I will ignore the rest.  As an expedient hack, I search for the color text in the description.  So ‘Red’, ‘Trans-Red’, and ‘Dark Red’ all count as ‘Red’.  I then store these indexes for later searching.  This method misses things like ‘Pink’, which is in the red family.  It also means ‘Trans-Red’ counts as a red piece and a translucent piece.  For a real problem I would be more thorough, but I just want to get to the decision tree.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> getColorIndexes color =</div><div class="line">    legoColors.Rows </div><div class="line">    |&gt; Seq.filter (<span class="keyword">fun</span> x -&gt; x.Descr.Contains(color)) </div><div class="line">    |&gt; Seq.map (<span class="keyword">fun</span> x -&gt; x.Id) </div><div class="line">    |&gt; Seq.toList</div><div class="line"></div><div class="line"><span class="keyword">let</span> redIndexes = getColorIndexes <span class="string">"Red"</span></div><div class="line"><span class="keyword">let</span> greenIndexes = getColorIndexes <span class="string">"Green"</span></div><div class="line"><span class="keyword">let</span> blueIndexes = getColorIndexes <span class="string">"Blue"</span></div><div class="line"><span class="keyword">let</span> whiteIndexes = getColorIndexes <span class="string">"White"</span></div><div class="line"><span class="keyword">let</span> blackIndexes = getColorIndexes <span class="string">"Black"</span></div><div class="line"><span class="keyword">let</span> grayIndexes = getColorIndexes <span class="string">"Gray"</span></div><div class="line"><span class="keyword">let</span> silverIndexes = getColorIndexes <span class="string">"Silver"</span></div><div class="line"><span class="keyword">let</span> translucentIndexes = getColorIndexes <span class="string">"Trans"</span></div></pre></td></tr></table></figure>
<p>To perform piece counts in the sets I’ll need to do some grouping.  I will use <em>SetCountsDetail</em> as an intermediate aggregation record type.  <em>SetDetail</em> will be my final output form.  You may notice I use counts for the aggregation, but in the final output I store “Percent of the set”.  I feel this should allow the feature values to be consistent across sets.  I also use the function <em>setCountsDetailSum</em> when folding group sums together.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Piece-type counts for sets (used for aggregation)</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">SetCountsDetail</span> </span>= &#123; </div><div class="line">    SetId: string; </div><div class="line">    BricksCount: int; </div><div class="line">    PlatesCount: int; </div><div class="line">    MinifigsCount: int;</div><div class="line">    PanelsCount: int;</div><div class="line">    PlantsAndAnimalsCount: int;</div><div class="line">    TilesCount: int;</div><div class="line">    TechnicsCount: int;</div><div class="line">    RedCount: int;</div><div class="line">    GreenCount: int;</div><div class="line">    BlueCount: int;</div><div class="line">    WhiteCount: int;</div><div class="line">    BlackCount: int;</div><div class="line">    GrayCount: int;</div><div class="line">    SilverCount: int;</div><div class="line">    TranslucentCount: int&#125;</div><div class="line"></div><div class="line"><span class="comment">// Set detail record (this is what gets written to the output file)</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">SetDetail</span> </span>= &#123; </div><div class="line">    SetId: string; </div><div class="line">    Year: int;</div><div class="line">    ThemeId: int;</div><div class="line">    PiecesCount: int; </div><div class="line">    BricksPct: float; </div><div class="line">    PlatesPct: float; </div><div class="line">    MinifigsPct: float </div><div class="line">    PanelsPct: float;</div><div class="line">    PlantsAndAnimalsPct: float;</div><div class="line">    TilesPct: float;</div><div class="line">    TechnicsPct: float;</div><div class="line">    RedPct: float;</div><div class="line">    GreenPct: float;</div><div class="line">    BluePct: float;</div><div class="line">    WhitePct: float;</div><div class="line">    BlackPct: float;</div><div class="line">    GrayPct: float;</div><div class="line">    SilverPct: float;</div><div class="line">    TranslucentPct: float&#125; <span class="keyword">with</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">member</span> toCsv d =</div><div class="line">        sprintf <span class="string">"%d,%d,%d,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f"</span> </div><div class="line">            d.ThemeId d.Year d.PiecesCount d.BricksPct d.PlatesPct d.MinifigsPct d.PanelsPct d.PlantsAndAnimalsPct d.TilesPct d.TechnicsPct d.RedPct d.GreenPct d.BluePct d.WhitePct d.BlackPct d.GrayPct d.SilverPct d.TranslucentPct</div><div class="line">    </div><div class="line"><span class="comment">// Sum counts for SetCountsDetail (use in fold)</span></div><div class="line"><span class="keyword">let</span> setCountsDetailSum (a:SetCountsDetail) (b:SetCountsDetail) = </div><div class="line">    &#123;a <span class="keyword">with</span> </div><div class="line">        BricksCount = a.BricksCount + b.BricksCount;</div><div class="line">        PlatesCount = a.PlatesCount + b.PlatesCount;</div><div class="line">        MinifigsCount = a.MinifigsCount + b.MinifigsCount;</div><div class="line">        PanelsCount = a.PanelsCount + b.PanelsCount;</div><div class="line">        PlantsAndAnimalsCount = a.PlantsAndAnimalsCount + b.PlantsAndAnimalsCount;</div><div class="line">        TilesCount = a.TilesCount + b.TilesCount;</div><div class="line">        TechnicsCount = a.TechnicsCount + b.TechnicsCount;</div><div class="line">        RedCount = a.RedCount + b.RedCount;</div><div class="line">        GreenCount = a.GreenCount + b.GreenCount;</div><div class="line">        BlueCount = a.BlueCount + b.BlueCount;</div><div class="line">        WhiteCount = a.WhiteCount + b.WhiteCount;</div><div class="line">        BlackCount = a.BlackCount + b.BlackCount;</div><div class="line">        GrayCount = a.GrayCount + b.GrayCount;</div><div class="line">        SilverCount = a.SilverCount + b.SilverCount;</div><div class="line">        TranslucentCount = a.TranslucentCount + b.TranslucentCount&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>Now I create a piece lookup using a Map (for the non-F#ers, think Dictionary).  I also filter only the piece type categories I care about.  There are 56, and for simplicity I will only look at seven.  I also group all “Technic*” categories into a single “Technic” category.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// Build lookup for pieces</span></div><div class="line"><span class="keyword">let</span> pieceLookup = </div><div class="line">    legoPieces.Rows</div><div class="line">    <span class="comment">// Only include these categories</span></div><div class="line">    |&gt; Seq.filter (<span class="keyword">fun</span> row -&gt; </div><div class="line">        row.Category = <span class="string">"Bricks"</span> || </div><div class="line">        row.Category = <span class="string">"Plates"</span> || </div><div class="line">        row.Category = <span class="string">"Minifigs"</span> ||</div><div class="line">        row.Category = <span class="string">"Panels"</span> ||</div><div class="line">        row.Category = <span class="string">"Plants and Animals"</span> ||</div><div class="line">        row.Category = <span class="string">"Tiles"</span> ||</div><div class="line">        row.Category.Contains(<span class="string">"Technic"</span>)</div><div class="line">        )</div><div class="line">    |&gt; Seq.map (<span class="keyword">fun</span> row -&gt; (row.Piece_id, <span class="keyword">if</span> row.Category.Contains(<span class="string">"Technic"</span>) <span class="keyword">then</span> <span class="string">"Technic"</span> <span class="keyword">else</span> row.Category))</div><div class="line">    |&gt; Map</div><div class="line"></div></pre></td></tr></table></figure>
<p>Here I take a row and transpose it in the intermediate feature columns I want.  <em>isColorIndex</em> is a helper function to determine if the specified piece color is part of one my color groupings.  </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Convert data row to a SetCountsDetail record</span></div><div class="line"><span class="keyword">let</span> isColorIndex indexList colorIndex = </div><div class="line">    indexList |&gt; List.filter (<span class="keyword">fun</span> x -&gt; x = colorIndex) |&gt; List.length &gt; <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">// Convert data row to a SetCountsDetail record</span></div><div class="line"><span class="keyword">let</span> rowToSetCountsDetail (row:CsvProvider&lt;<span class="string">"../data/legos/set_pieces.csv"</span>&gt;.Row) = </div><div class="line">    <span class="keyword">let</span> c = pieceLookup.Item row.Piece_id</div><div class="line">    &#123;        </div><div class="line">        SetCountsDetail.SetId = row.Set_id;  </div><div class="line">        BricksCount = <span class="keyword">if</span> c = <span class="string">"Bricks"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        PlatesCount = <span class="keyword">if</span> c = <span class="string">"Plates"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        MinifigsCount = <span class="keyword">if</span> c = <span class="string">"Minifigs"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        PanelsCount = <span class="keyword">if</span> c = <span class="string">"Panels"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        PlantsAndAnimalsCount = <span class="keyword">if</span> c = <span class="string">"Plants and Animals"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        TilesCount = <span class="keyword">if</span> c = <span class="string">"Tiles"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        TechnicsCount = <span class="keyword">if</span> c = <span class="string">"Technic"</span> <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        RedCount = <span class="keyword">if</span> isColorIndex redIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        GreenCount = <span class="keyword">if</span> isColorIndex greenIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        BlueCount = <span class="keyword">if</span> isColorIndex blueIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        WhiteCount = <span class="keyword">if</span> isColorIndex whiteIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        BlackCount = <span class="keyword">if</span> isColorIndex blackIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        GrayCount = <span class="keyword">if</span> isColorIndex grayIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        SilverCount = <span class="keyword">if</span> isColorIndex silverIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>;</div><div class="line">        TranslucentCount = <span class="keyword">if</span> isColorIndex translucentIndexes row.Color <span class="keyword">then</span> row.Num <span class="keyword">else</span> <span class="number">0</span>&#125;</div></pre></td></tr></table></figure>
<p>I then create a series of lookup functions to support the transformation process. In <em>setPiecesLookup</em> I make a Map for piece counts by SetId.  It gets alittle gnarly, but it does a group by on SetId, then sums all columns up to that level. <em>getCountLookup</em> is used to get piece counts by setid. <em>themesLookup</em> maps the set’s theme text to an arbitrary int.  I will save that into a lookup table/file as well for later access.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Build lookup for setpieces</span></div><div class="line"><span class="keyword">let</span> setPiecesLookup = </div><div class="line">    legoSetPieces.Rows</div><div class="line">    |&gt; Seq.filter (<span class="keyword">fun</span> r -&gt; Map.containsKey r.Piece_id pieceLookup)</div><div class="line">    |&gt; Seq.map rowToSetCountsDetail</div><div class="line">    <span class="comment">// Sum counts up to SetId                             </span></div><div class="line">    |&gt; Seq.groupBy (<span class="keyword">fun</span> x -&gt; x.SetId)</div><div class="line">    |&gt; Seq.map (<span class="keyword">fun</span> (k, v) -&gt; </div><div class="line">        (k, </div><div class="line">         v |&gt; Seq.fold setCountsDetailSum &#123; SetCountsDetail.SetId = k; BricksCount = <span class="number">0</span>; PlatesCount = <span class="number">0</span>; MinifigsCount = <span class="number">0</span>; PanelsCount = <span class="number">0</span>;  PlantsAndAnimalsCount = <span class="number">0</span>; TilesCount = <span class="number">0</span>; TechnicsCount = <span class="number">0</span>; RedCount = <span class="number">0</span>; GreenCount = <span class="number">0</span>; BlueCount = <span class="number">0</span>; WhiteCount = <span class="number">0</span>; BlackCount = <span class="number">0</span>; GrayCount = <span class="number">0</span>; SilverCount = <span class="number">0</span>; TranslucentCount = <span class="number">0</span>&#125;))                                </div><div class="line">    <span class="comment">// Create lookup</span></div><div class="line">    |&gt; Map</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Lookup piece count in the set, if not found, return 0</span></div><div class="line"><span class="keyword">let</span> getCountLookup k =</div><div class="line">    <span class="keyword">match</span> Map.tryFind k setPiecesLookup <span class="keyword">with</span></div><div class="line">    | Some(x) -&gt; x</div><div class="line">    | _       -&gt; &#123; SetId = k; BricksCount = <span class="number">0</span>; PlatesCount = <span class="number">0</span>; MinifigsCount = <span class="number">0</span>; PanelsCount = <span class="number">0</span>; PlantsAndAnimalsCount = <span class="number">0</span>; TilesCount = <span class="number">0</span>; TechnicsCount = <span class="number">0</span>; RedCount = <span class="number">0</span>; GreenCount = <span class="number">0</span>; BlueCount = <span class="number">0</span>; WhiteCount = <span class="number">0</span>; BlackCount = <span class="number">0</span>; GrayCount = <span class="number">0</span>; SilverCount = <span class="number">0</span>; TranslucentCount = <span class="number">0</span>&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Create theme lookups from the sets files</span></div><div class="line"><span class="keyword">let</span> themesLookup =</div><div class="line">    <span class="keyword">let</span> distinctThemes = legoSets.Rows |&gt; Seq.map (<span class="keyword">fun</span> row -&gt; row.T1) |&gt; Seq.distinct</div><div class="line"></div><div class="line">    <span class="comment">// Pair theme string with an int</span></div><div class="line">    (distinctThemes, seq [<span class="number">0.</span>.Seq.length distinctThemes])</div><div class="line">    ||&gt; Seq.zip</div><div class="line">    |&gt; Map</div><div class="line"></div></pre></td></tr></table></figure>
<p>All the hard work is done.  I now just take the data from the file and run it through a series of filters and transformations to transpose the bricktype and piece color counts into “percent of the set” columns.  Once that is done I write out a file <code>aggregatedata.csv</code> that will be used in Part 2.  I also save a themes lookup file.  The lookup isn’t actually needed for the decision tree processing, but its a nice-to-have if I want to remap the int ids back to text values for evaluation.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Build dataset</span></div><div class="line"><span class="keyword">let</span> dataset = </div><div class="line">    legoSets.Rows</div><div class="line">    <span class="comment">// Exclude blank themes</span></div><div class="line">    |&gt; Seq.filter (<span class="keyword">fun</span> row -&gt; not (String.IsNullOrEmpty(row.T1)))</div><div class="line">    <span class="comment">// Exclude sets with 0 pieces</span></div><div class="line">    |&gt; Seq.filter (<span class="keyword">fun</span> row -&gt; row.Pieces &lt;&gt; <span class="number">0</span>)</div><div class="line">    |&gt; Seq.map (<span class="keyword">fun</span> row -&gt;</div><div class="line">        <span class="comment">// Get item type counts for each row (ie set)</span></div><div class="line">        <span class="keyword">let</span> bricksCount = (getCountLookup row.Set_id).BricksCount</div><div class="line">        <span class="keyword">let</span> platesCount = (getCountLookup row.Set_id).PlatesCount</div><div class="line">        <span class="keyword">let</span> minifigsCount = (getCountLookup row.Set_id).MinifigsCount</div><div class="line">        <span class="keyword">let</span> panelsCount = (getCountLookup row.Set_id).PanelsCount</div><div class="line">        <span class="keyword">let</span> plantsAndAnimalsCount = (getCountLookup row.Set_id).PlantsAndAnimalsCount</div><div class="line">        <span class="keyword">let</span> tilesCount = (getCountLookup row.Set_id).TilesCount</div><div class="line">        <span class="keyword">let</span> technicsCount = (getCountLookup row.Set_id).TechnicsCount</div><div class="line">        <span class="keyword">let</span> redCount = (getCountLookup row.Set_id).RedCount</div><div class="line">        <span class="keyword">let</span> greenCount = (getCountLookup row.Set_id).GreenCount</div><div class="line">        <span class="keyword">let</span> blueCount = (getCountLookup row.Set_id).BlueCount</div><div class="line">        <span class="keyword">let</span> whiteCount = (getCountLookup row.Set_id).WhiteCount</div><div class="line">        <span class="keyword">let</span> blackCount = (getCountLookup row.Set_id).BlackCount</div><div class="line">        <span class="keyword">let</span> grayCount = (getCountLookup row.Set_id).GrayCount</div><div class="line">        <span class="keyword">let</span> silverCount = (getCountLookup row.Set_id).SilverCount</div><div class="line">        <span class="keyword">let</span> translucentCount = (getCountLookup row.Set_id).TranslucentCount</div><div class="line"></div><div class="line">        <span class="comment">// Build a record for writing</span></div><div class="line">        &#123;SetId = row.Set_id;</div><div class="line">         Year = row.Year;</div><div class="line">         ThemeId = themesLookup.Item row.T1;</div><div class="line">         PiecesCount = row.Pieces;</div><div class="line">         BricksPct = float(bricksCount) / float(row.Pieces);</div><div class="line">         PlatesPct = float(platesCount) / float(row.Pieces);</div><div class="line">         MinifigsPct = float(minifigsCount) / float(row.Pieces);          </div><div class="line">         PanelsPct = float(panelsCount) / float(row.Pieces); </div><div class="line">         PlantsAndAnimalsPct = float(plantsAndAnimalsCount) / float(row.Pieces); </div><div class="line">         TilesPct = float(tilesCount) / float(row.Pieces);</div><div class="line">         TechnicsPct = float(technicsCount) / float(row.Pieces);</div><div class="line">         RedPct = float(redCount) / float(row.Pieces);</div><div class="line">         GreenPct = float(greenCount) / float(row.Pieces);</div><div class="line">         BluePct = float(blueCount) / float(row.Pieces);</div><div class="line">         WhitePct = float(whiteCount) / float(row.Pieces);</div><div class="line">         BlackPct = float(blackCount) / float(row.Pieces);</div><div class="line">         GrayPct = float(grayCount) / float(row.Pieces);</div><div class="line">         SilverPct = float(silverCount) / float(row.Pieces);</div><div class="line">         TranslucentPct = float(translucentCount) / float(row.Pieces)&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Write dataset to output file</span></div><div class="line"><span class="keyword">let</span> dataFile = List.Cons (</div><div class="line">    <span class="string">"ThemeId,Year,PiecesCount,BricksPct,PlatesPct,MinifigsPct,PanelsPct,PlantsAndAnimalsPct,TilesPct,TechnicsCount,RedPct,GreenPct,BluePct,WhitePct,BlackPct,GrayPct,SilverPct,TranslucentPct"</span>, </div><div class="line">    dataset</div><div class="line">    |&gt; Seq.toList</div><div class="line">    |&gt; List.map SetDetail.toCsv)</div><div class="line">	</div><div class="line">File.WriteAllLines(Path.Combine(__SOURCE_DIRECTORY__, <span class="string">@"..\\data\\legos\\aggregatedata.csv"</span>), dataFile)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Write themes lookup to a file</span></div><div class="line"><span class="keyword">let</span> themesFile = List.Cons (</div><div class="line">    <span class="string">"ThemeId,Theme"</span>,</div><div class="line">    themesLookup</div><div class="line">    |&gt; Map.toList </div><div class="line">    |&gt; List.map (<span class="keyword">fun</span> (key, value) -&gt; sprintf <span class="string">"%s,%d"</span> key value))</div><div class="line"></div><div class="line">File.WriteAllLines(Path.Combine(__SOURCE_DIRECTORY__, <span class="string">@"..\\data\\legos\\aggregatedata_themes.csv"</span>), themesFile)</div></pre></td></tr></table></figure>
<p>Here are samples of the aggregate data and lookups files.</p>
<p>File: aggregatedata.csv<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ThemeId,Year,PiecesCount,BricksPct,PlatesPct,MinifigsPct,PanelsPct,PlantsAndAnimalsPct,TilesPct,TechnicsCount,RedPct,GreenPct,BluePct,WhitePct,BlackPct,GrayPct,SilverPct,TranslucentPct</div><div class="line">0,1970,471,0.8110,0.0892,0.0000,0.0000,0.0000,0.0000,0.0000,0.1359,0.0000,0.0212,0.4480,0.0000,0.0828,0.0000,0.0000</div><div class="line">1,1978,12,0.0000,0.0000,0.8333,0.0000,0.0000,0.0000,0.0000,0.1667,0.0000,0.1667,0.0000,0.2500,0.0000,0.0000,0.0000</div><div class="line">2,1987,2,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>File: aggregatedata_themes.csv<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ThemeId,Theme</div><div class="line">4 Juniors,47</div><div class="line">Adventurers,28</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p><a href="/data/legodecisiontree.zip">Data Files</a></p>
<p>So there are the data transformations.  Until next time…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It is time for an exploration into using a Decision Tree to classify Lego set themes using &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; r
    
    </summary>
    
    
      <category term="F#" scheme="http://beitzel.org/tags/F/"/>
    
      <category term="Accord.NET" scheme="http://beitzel.org/tags/Accord-NET/"/>
    
      <category term="Decision Trees" scheme="http://beitzel.org/tags/Decision-Trees/"/>
    
      <category term="Machine Learning" scheme="http://beitzel.org/tags/Machine-Learning/"/>
    
      <category term="Legos" scheme="http://beitzel.org/tags/Legos/"/>
    
      <category term="Data" scheme="http://beitzel.org/tags/Data/"/>
    
  </entry>
  
  <entry>
    <title>Edge Filter using F# and Accord.NET</title>
    <link href="http://beitzel.org/2016/11/23/Edge-Filter-using-F-and-Accord-NET/"/>
    <id>http://beitzel.org/2016/11/23/Edge-Filter-using-F-and-Accord-NET/</id>
    <published>2016-11-23T12:56:08.000Z</published>
    <updated>2016-11-23T14:36:42.306Z</updated>
    
    <content type="html"><![CDATA[<p>This is a sample of how to apply edge filters to a set of images using <a href="http://fsharp.org/" target="_blank" rel="external">F#</a> and <a href="http://accord-framework.net/" target="_blank" rel="external">Accord.NET</a>.  The framework provides several <a href="http://accord-framework.net/docs/html/N_Accord_Imaging_Filters.htm" target="_blank" rel="external">Filters</a> for image manipulating.  Since I’m interested in edge enhancement I’ll limit my scope to those filters.  In particular I’ve selected the <code>DifferenceEdgeDetector()</code>.</p>
<p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="external">Paket</a>, here is a sample <code>paket.dependencies</code> file.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source https:<span class="comment">//nuget.org/api/v2</span></div><div class="line">nuget Accord</div><div class="line">nuget Accord.Imaging</div></pre></td></tr></table></figure>
<p>This is the boring setup stuff.  </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Ref: http://accord-framework.net/docs/html/N_Accord_Imaging_Filters.htm</span></div><div class="line"></div><div class="line">#i <span class="string">"../packages"</span></div><div class="line">#r <span class="string">"../packages/Accord/lib/net45/accord.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord.Imaging/lib/net45/accord.imaging.dll"</span></div><div class="line"></div><div class="line"><span class="keyword">open</span> System</div><div class="line"><span class="keyword">open</span> System.Drawing</div><div class="line"><span class="keyword">open</span> System.Drawing.Imaging</div><div class="line"><span class="keyword">open</span> System.IO</div><div class="line"><span class="keyword">open</span> Accord</div><div class="line"><span class="keyword">open</span> Accord.Imaging</div><div class="line"><span class="keyword">open</span> Accord.Imaging.Filters</div><div class="line"></div><div class="line"><span class="keyword">let</span> imageRoot = Path.GetFullPath(Path.Combine(__SOURCE_DIRECTORY__, <span class="string">"../data/"</span>))</div><div class="line"><span class="keyword">let</span> resultsRoot = Path.GetFullPath(Path.Combine(__SOURCE_DIRECTORY__, <span class="string">"../data/results/"</span>))</div></pre></td></tr></table></figure>
<p>Loading and applying the filter is straight-forward.  The only additional point worthy of mention is that most of the edge filters require the image to be in grayscale.  That conversion is included in this function.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Process image and save a result file with edge filter applied</span></div><div class="line"><span class="keyword">let</span> filterImage (resultsDir:string) (imageName:string) =</div><div class="line">    <span class="keyword">let</span> resultImageName = Path.Combine(resultsDir, Path.GetFileName(imageName))        </div><div class="line">    <span class="keyword">let</span> bitmap = <span class="keyword">new</span> Bitmap(imageName)</div><div class="line"></div><div class="line">    <span class="comment">// Need to reduce to grayscale, filter needs a reduced color bitmap to process</span></div><div class="line">    <span class="keyword">let</span> bitmapGray = Grayscale.CommonAlgorithms.BT709.Apply(bitmap)</div><div class="line">    <span class="keyword">let</span> filter = <span class="keyword">new</span> DifferenceEdgeDetector()</div><div class="line"></div><div class="line">    filter.ApplyInPlace(bitmapGray)</div><div class="line"></div><div class="line">    File.Delete resultImageName</div><div class="line">    bitmapGray.Save(resultImageName)</div></pre></td></tr></table></figure>
<p>The below code gets a list of qualifying images, then sends them through the filtering function.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Is file an image file?</span></div><div class="line"><span class="keyword">let</span> isImageFile (fileName:string) = </div><div class="line">    fileName.EndsWith(<span class="string">".jpg"</span>, StringComparison.OrdinalIgnoreCase)</div><div class="line">    || fileName.EndsWith(<span class="string">".png"</span>, StringComparison.OrdinalIgnoreCase)</div><div class="line"></div><div class="line"><span class="comment">// Get Image list to process</span></div><div class="line"><span class="keyword">let</span> imageNames = </div><div class="line">    Directory.GetFiles imageRoot </div><div class="line">    |&gt; Array.filter isImageFile</div><div class="line"></div><div class="line"><span class="comment">// Process images</span></div><div class="line">imageNames </div><div class="line">|&gt; Array.iter (filterImage resultsRoot)</div></pre></td></tr></table></figure>
<p>Below is an example of the edge filter applied.</p>
<p><img src="/images/edges_before.jpg" alt="Before"></p>
<p><img src="/images/edges_after.jpg" alt="After"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a sample of how to apply edge filters to a set of images using &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;F#&lt;/a&gt;
    
    </summary>
    
    
      <category term="F#" scheme="http://beitzel.org/tags/F/"/>
    
      <category term="Accord.NET" scheme="http://beitzel.org/tags/Accord-NET/"/>
    
      <category term="Images" scheme="http://beitzel.org/tags/Images/"/>
    
  </entry>
  
  <entry>
    <title>Face Detection with F# and Accord.NET</title>
    <link href="http://beitzel.org/2016/11/21/Face-Detection-with-FSharp-and-Accord-NET/"/>
    <id>http://beitzel.org/2016/11/21/Face-Detection-with-FSharp-and-Accord-NET/</id>
    <published>2016-11-21T14:48:50.000Z</published>
    <updated>2016-11-23T12:57:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a quick sample using <a href="http://fsharp.org/" target="_blank" rel="external">F#</a> and <a href="http://accord-framework.net/" target="_blank" rel="external">Accord.NET</a> to do face detection.  The method uses the provided Haar-like feature detection.  The results aren’t particularly good, but for little effort it’s an ok start.  At a minimum, it does reasonably well at detecting potential regions of interest.  For the test images, the best improvements were found when constraining the min/max range based on the known sizes of faces in the pictures.</p>
<p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="external">Paket</a>, here is a sample <code>paket.dependencies</code> file.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">source https:<span class="comment">//nuget.org/api/v2</span></div><div class="line">nuget Accord</div><div class="line">nuget Accord.Math</div><div class="line">nuget Accord.Statistics</div><div class="line">nuget Accord.MachineLearning</div><div class="line">nuget Accord.Vision</div><div class="line">nuget Accord.Imaging</div></pre></td></tr></table></figure>
<p>This is the boring setup stuff.  </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ref: http://accord-framework.net/docs/html/N_Accord_Vision_Detection.htm</span></div><div class="line"></div><div class="line">#i <span class="string">"../packages"</span></div><div class="line">#r <span class="string">"../packages/Accord/lib/net45/accord.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord.Imaging/lib/net45/accord.imaging.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord.Vision/lib/net45/accord.vision.dll"</span></div><div class="line"></div><div class="line"><span class="keyword">open</span> System</div><div class="line"><span class="keyword">open</span> Accord</div><div class="line"><span class="keyword">open</span> Accord.Imaging</div><div class="line"><span class="keyword">open</span> Accord.Vision</div><div class="line"><span class="keyword">open</span> Accord.Vision.Detection</div><div class="line"><span class="keyword">open</span> System.Drawing</div><div class="line"><span class="keyword">open</span> System.Drawing.Imaging</div><div class="line"><span class="keyword">open</span> System.IO</div><div class="line"></div><div class="line"><span class="keyword">let</span> imageRoot = Path.GetFullPath(Path.Combine(__SOURCE_DIRECTORY__, <span class="string">"../data/haar_face/"</span>))</div><div class="line"><span class="keyword">let</span> resultsRoot = Path.GetFullPath(Path.Combine(__SOURCE_DIRECTORY__, <span class="string">"../data/haar_face/results/"</span>))</div></pre></td></tr></table></figure>
<p>Two cascades are provided, <code>FaceHaarCascade()</code> and <code>NoseHaarCascade()</code>.  Custom ones can be created, but for an initial test, one of the provided cascades is good enough.  The minSize and maxSize values are hardcoded hacks to match the expected face sizes in the test images.  They are used to define the minimum and maximum window size to consider as the algorithm scans the image.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> cascade = Cascades.FaceHaarCascade()</div><div class="line"><span class="comment">//let cascade = Cascades.NoseHaarCascade()</span></div><div class="line"><span class="keyword">let</span> minSize = <span class="number">200</span> </div><div class="line"><span class="keyword">let</span> maxSize = <span class="number">2000</span></div></pre></td></tr></table></figure>
<p>This is a function that will add a bounding box to the bitmap with the specified line color and width.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Draw bound-box on Bitmap </span></div><div class="line"><span class="comment">// TopLeft: (x1, y1)</span></div><div class="line"><span class="comment">// BottomRight: (x2, y2) </span></div><div class="line"><span class="keyword">let</span> drawRectangle (bitmap:Bitmap) (x1:int) (y1:int) (x2:int) (y2:int) (lineWidth:int) (lineColor:Color) = </div><div class="line">    [x1..x2] </div><div class="line">    |&gt; List.iter (<span class="keyword">fun</span> x -&gt;</div><div class="line">        [<span class="number">0.</span>.lineWidth] </div><div class="line">        |&gt; List.iter (<span class="keyword">fun</span> i -&gt; </div><div class="line">            bitmap.SetPixel(x, y1 + i, lineColor) </div><div class="line">            bitmap.SetPixel(x, y2 - i, lineColor)))</div><div class="line"></div><div class="line">    [y1..y2] </div><div class="line">    |&gt; List.iter (<span class="keyword">fun</span> y -&gt; </div><div class="line">        [<span class="number">0.</span>.lineWidth] </div><div class="line">        |&gt; List.iter (<span class="keyword">fun</span> i -&gt; </div><div class="line">            bitmap.SetPixel(x1 + i, y, lineColor) </div><div class="line">            bitmap.SetPixel(x2 - i, y, lineColor)))</div></pre></td></tr></table></figure>
<p>This is the core component of interest.  It loads a bitmap, runs the object detector, draws bounding boxes around the detected locations, then saves a “result” image.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> processImage (cascade:HaarCascade) (minSize:int) (maxSize:int) (resultsDir:string) (imageName:string) =</div><div class="line">    <span class="keyword">let</span> resultImageName = Path.Combine(resultsDir, Path.GetFileName(imageName))        </div><div class="line">    <span class="keyword">let</span> bitmap = <span class="keyword">new</span> Bitmap(imageName)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> haar = HaarObjectDetector(cascade, minSize)</div><div class="line">    haar.MaxSize &lt;- <span class="keyword">new</span> Size(<span class="keyword">new</span> Point(<span class="keyword">new</span> Size(maxSize, maxSize)))</div><div class="line">    <span class="keyword">let</span> faceFinder = haar.ProcessFrame(bitmap)</div><div class="line"></div><div class="line">    faceFinder</div><div class="line">    |&gt; Array.iter (<span class="keyword">fun</span> r -&gt; </div><div class="line">        drawRectangle bitmap r.X r.Y (r.X + r.Width) (r.Y + r.Height) <span class="number">5</span> Color.Blue)</div><div class="line"></div><div class="line">    File.Delete resultImageName</div><div class="line">    bitmap.Save(resultImageName)</div></pre></td></tr></table></figure>
<p>The below code gets a list of qualifying images, then sends them through the processing function.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> isImageFile (fileName:string) = </div><div class="line">    fileName.EndsWith(<span class="string">".jpg"</span>, StringComparison.OrdinalIgnoreCase)</div><div class="line">    || fileName.EndsWith(<span class="string">".png"</span>, StringComparison.OrdinalIgnoreCase)</div><div class="line"></div><div class="line"><span class="keyword">let</span> imageNames = </div><div class="line">    Directory.GetFiles imageRoot </div><div class="line">    |&gt; Array.filter isImageFile</div><div class="line"></div><div class="line">imageNames </div><div class="line">|&gt; Array.iter (processImage cascade minSize maxSize resultsRoot)</div></pre></td></tr></table></figure>
<p>That is all there is to it.  Certainly the method can be improved, but hopefully this shows a small taste of what can be done with F#.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a quick sample using &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;http://accord-framework.net/
    
    </summary>
    
    
      <category term="F#" scheme="http://beitzel.org/tags/F/"/>
    
      <category term="Accord.NET" scheme="http://beitzel.org/tags/Accord-NET/"/>
    
      <category term="Machine Learning" scheme="http://beitzel.org/tags/Machine-Learning/"/>
    
      <category term="Images" scheme="http://beitzel.org/tags/Images/"/>
    
      <category term="Computer Vision" scheme="http://beitzel.org/tags/Computer-Vision/"/>
    
  </entry>
  
</feed>
