<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Beitzel.org</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://beitzel.org/"/>
  <updated>2016-11-21T21:03:21.105Z</updated>
  <id>http://beitzel.org/</id>
  
  <author>
    <name>Beitzel.org</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Face Detection with F# and Accord.NET</title>
    <link href="http://beitzel.org/2016/11/21/Face-Detection-with-FSharp-and-Accord-NET/"/>
    <id>http://beitzel.org/2016/11/21/Face-Detection-with-FSharp-and-Accord-NET/</id>
    <published>2016-11-21T14:48:50.000Z</published>
    <updated>2016-11-21T21:03:21.105Z</updated>
    
    <content type="html"><![CDATA[<p>This is a quick experiment using <a href="http://fsharp.org/" target="_blank" rel="external">F#</a> and <a href="http://accord-framework.net/" target="_blank" rel="external">Accord.NET</a> to do face detection.  The method uses the provided Haar-like feature detection.  The results aren’t particularly good, but for little effort it’s an ok start.  At a minimum, it does reasonably well at detecting potential regions of interest.  For the test images, the best improvements were found when constraining the min/max range based on the known sizes of faces in the pictures.</p>
<p>Using <a href="https://github.com/fsprojects/Paket" target="_blank" rel="external">Paket</a>, here is a sample <code>paket.dependencies</code> file.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">source https:<span class="comment">//nuget.org/api/v2</span></div><div class="line">nuget Accord</div><div class="line">nuget Accord.Math</div><div class="line">nuget Accord.Statistics</div><div class="line">nuget Accord.MachineLearning</div><div class="line">nuget Accord.Vision</div><div class="line">nuget Accord.Imaging</div></pre></td></tr></table></figure>
<p>This is the boring setup stuff.  </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ref: http://accord-framework.net/docs/html/N_Accord_Vision_Detection.htm</span></div><div class="line"></div><div class="line">#i <span class="string">"../packages"</span></div><div class="line">#r <span class="string">"../packages/Accord/lib/net45/accord.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord.Imaging/lib/net45/accord.imaging.dll"</span></div><div class="line">#r <span class="string">"../packages/Accord.Vision/lib/net45/accord.vision.dll"</span></div><div class="line"></div><div class="line"><span class="keyword">open</span> System</div><div class="line"><span class="keyword">open</span> Accord</div><div class="line"><span class="keyword">open</span> Accord.Imaging</div><div class="line"><span class="keyword">open</span> Accord.Vision</div><div class="line"><span class="keyword">open</span> Accord.Vision.Detection</div><div class="line"><span class="keyword">open</span> System.Drawing</div><div class="line"><span class="keyword">open</span> System.Drawing.Imaging</div><div class="line"><span class="keyword">open</span> System.IO</div><div class="line"></div><div class="line"><span class="keyword">let</span> imageRoot = Path.GetFullPath(Path.Combine(__SOURCE_DIRECTORY__, <span class="string">"../data/haar_face/"</span>))</div><div class="line"><span class="keyword">let</span> resultsRoot = Path.GetFullPath(Path.Combine(__SOURCE_DIRECTORY__, <span class="string">"../data/haar_face/results/"</span>))</div></pre></td></tr></table></figure>
<p>Two cascades are provided, <code>FaceHaarCascade()</code> and <code>NoseHaarCascade()</code>.  Custom ones can be created, but for an initial test, one of the provided cascades is good enough.  The minSize and maxSize values are hardcoded hacks to match the expected face sizes in the test images.  They are used to define the minimum and maximum window size to consider as the algorithm scans the image.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> cascade = Cascades.FaceHaarCascade()</div><div class="line"><span class="comment">//let cascade = Cascades.NoseHaarCascade()</span></div><div class="line"><span class="keyword">let</span> minSize = <span class="number">200</span> </div><div class="line"><span class="keyword">let</span> maxSize = <span class="number">2000</span></div></pre></td></tr></table></figure>
<p>This is a function that will add a bounding box to the bitmap with the specified line color and width.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Draw bound-box on Bitmap </span></div><div class="line"><span class="comment">// TopLeft: (x1, y1)</span></div><div class="line"><span class="comment">// BottomRight: (x2, y2) </span></div><div class="line"><span class="keyword">let</span> drawRectangle (bitmap:Bitmap) (x1:int) (y1:int) (x2:int) (y2:int) (lineWidth:int) (lineColor:Color) = </div><div class="line">    [x1..x2] </div><div class="line">    |&gt; List.iter (<span class="keyword">fun</span> x -&gt;</div><div class="line">        [<span class="number">0.</span>.lineWidth] </div><div class="line">        |&gt; List.iter (<span class="keyword">fun</span> i -&gt; </div><div class="line">            bitmap.SetPixel(x, y1 + i, lineColor) </div><div class="line">            bitmap.SetPixel(x, y2 - i, lineColor)))</div><div class="line"></div><div class="line">    [y1..y2] </div><div class="line">    |&gt; List.iter (<span class="keyword">fun</span> y -&gt; </div><div class="line">        [<span class="number">0.</span>.lineWidth] </div><div class="line">        |&gt; List.iter (<span class="keyword">fun</span> i -&gt; </div><div class="line">            bitmap.SetPixel(x1 + i, y, lineColor) </div><div class="line">            bitmap.SetPixel(x2 - i, y, lineColor)))</div></pre></td></tr></table></figure>
<p>This is the core component of interest.  It loads a bitmap, runs the object detector, draws bounding boxes around the detected locations, then saves a “result” image.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> processImage (cascade:HaarCascade) (minSize:int) (maxSize:int) (resultsDir:string) (imageName:string) =</div><div class="line">    <span class="keyword">let</span> resultImageName = Path.Combine(resultsDir, Path.GetFileName(imageName))        </div><div class="line">    <span class="keyword">let</span> bitmap = <span class="keyword">new</span> Bitmap(imageName)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> haar = HaarObjectDetector(cascade, minSize)</div><div class="line">    haar.MaxSize &lt;- <span class="keyword">new</span> Size(<span class="keyword">new</span> Point(<span class="keyword">new</span> Size(maxSize, maxSize)))</div><div class="line">    <span class="keyword">let</span> faceFinder = haar.ProcessFrame(bitmap)</div><div class="line"></div><div class="line">    faceFinder</div><div class="line">    |&gt; Array.iter (<span class="keyword">fun</span> r -&gt; </div><div class="line">        drawRectangle bitmap r.X r.Y (r.X + r.Width) (r.Y + r.Height) <span class="number">5</span> Color.Blue)</div><div class="line"></div><div class="line">    File.Delete resultImageName</div><div class="line">    bitmap.Save(resultImageName)</div></pre></td></tr></table></figure>
<p>The below code gets a list of qualifying images, then sends them through the processing function.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> isImageFile (fileName:string) = </div><div class="line">    fileName.EndsWith(<span class="string">".jpg"</span>, StringComparison.OrdinalIgnoreCase)</div><div class="line">    || fileName.EndsWith(<span class="string">".png"</span>, StringComparison.OrdinalIgnoreCase)</div><div class="line"></div><div class="line"><span class="keyword">let</span> imageNames = </div><div class="line">    Directory.GetFiles imageRoot </div><div class="line">    |&gt; Array.filter isImageFile</div><div class="line"></div><div class="line">imageNames </div><div class="line">|&gt; Array.iter (processImage cascade minSize maxSize resultsRoot)</div></pre></td></tr></table></figure>
<p>That is all there is to it.  Certainly the method can be improved, but hopefully this shows a small taste of what can be done with F#.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a quick experiment using &lt;a href=&quot;http://fsharp.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;F#&lt;/a&gt; and &lt;a href=&quot;http://accord-framework.
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://beitzel.org/tags/Machine-Learning/"/>
    
      <category term="F#" scheme="http://beitzel.org/tags/F/"/>
    
      <category term="Accord.NET" scheme="http://beitzel.org/tags/Accord-NET/"/>
    
      <category term="Computer Vision" scheme="http://beitzel.org/tags/Computer-Vision/"/>
    
  </entry>
  
</feed>
